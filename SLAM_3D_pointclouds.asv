% % mmWave 3D Point Clouds SLAM
clear;
clc;
close all;

x = detectImportOptions("straightLine.txt");
x.SelectedVariableNames = {'x'};
xData = readtable("straightLine.txt", opts);
xData = table2array(xData);
count = 1;

% Erase weird characters from string before processing
xData = erase(xData, newline);
xData = erase(xData, char(13)); % Carriage return

yData = erase(xData, newline);
yData = erase(xData, char(13)); % Carriage return

zData = erase(xData, newline);
zData = erase(xData, char(13)); % Carriage return

xOutData = [];
yOutdata = [];
zOutData = [];

% This is for getting all data, but we want to only combine 10 frames or so
% for i=1:height(xData)
for i=1:30
    xOutData = [xOutData str2num(xData{i})];
end

xOutData = xOutData';


% % Convert this data into .mat file
% x = [-0.0332 -0.21094 -0.06445 0.003906	0.003906; 
%     -0.04883 -0.2207 -0.0332 -0.22461 0.005859; 
%     0.052734 -0.21094 -0.04883 -0.13281 0.003906; 
%     -0.2793 -0.0332 -0.06445 -0.44531 0.003906; 
%     -0.2207 -0.04883 0.003906 0.003906 -0.12891];
% 
% y = [0.037109 0.71875 0.105469 0.134766 0.125;
%     0.054688 0.658203 0.048828 0.532356	0.171875;
%     0.417969 0.716797 0.070313 0.181641 0.085938;
%     0.542567 0.058594 0.080078 0.361328 0.128906;
%     0.667969 0.087891 0.087891 0.080078 0.128906];
% 
% z = [0.080078 0.011719 0.142578 -0.04297 -0.06445;
%     0.119141 0.111328 0.074219 -0.39844 -0.07617;
%     -0.0332 0.072266 0.111328 -0.41211 -0.03906;
%     -0.42578 0.066406 0.15625 -0.48242 -0.05469;
%     0.035156 0.097656 -0.03516 -0.04688 -0.04102];
% 
% pClouds = n-by-3 array
% pClouds = [x;y;z];
% 
% % Parameters For Point Cloud Registration Algorithm
% % We should update these parameters by experimenting with mmWave Sensor
% 
% maxRange = 20;
% 
% referenceVector = [0 0 1];
% maxDistance = 0.5;
% maxAngularDistance = 15;
% 
% randomSampleRatio = 0.25;
% 
% gridStep = 2.5;
% distanceMovedThreshold = 0.3;
% 
% % Parameters For Loop Closure Estimation Algorithm
% 
% loopClosureSearchRadius = 3;
% 
% nScansPerSubmap = 3;
% subMapThresh = 50;
% 
% annularRegionLimits = [-0.75 0.75];
% 
% rmseThreshold = 0.26;
% 
% loopClosureThreshold = 150;
% optimizationInterval = 2;
% 
% % Initialize Variables
% 
% % 3D Posegraph object for storing estimated relative poses
% pGraph = poseGraph3D;
% % Default serialized upper-right triangle of 6-by-6 Information Matrix
% infoMat = [1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1];
% % Number of loop closure edges added since last pose graph optimization and map refinement
% numLoopClosuresSinceLastOptimization = 0; 
% % True after pose graph optimization until the next scan
% mapUpdated = false;
% % Equals to 1 if the scan is accepted
% scanAccepted = 0;
% 
% % 3D Occupancy grid object for creating and visualizing 3D map
% mapResolution = 8; % cells per meter
% omap = occupancyMap3D(mapResolution);
% 
% pcProcessed = cell(1,length(pClouds));
% mmWaveScans2d = cell(1,length(pClouds)); 
% submaps = cell(1,length(pClouds)/nScansPerSubmap);
% 
% pcsToView = cell(1,length(pClouds)); 
% 
% % Set to 1 to visualize created map and posegraph during build process
% viewMap = 1; 
% % Set to 1 to visualize processed point clouds during build process
% viewPC = 0;
% 
% rng(0);
% 
% % If you want to view the point clouds while processing them sequentially
% if viewPC==1
%     pplayer = pcplayer([-50 50],[-50 50],[-10 10],'MarkerSize',10);
% end
% 
% % If you want to view the created map and posegraph during build process
% if viewMap==1
%     ax = newplot; % Figure axis handle
%     view(20,50);
%     grid on;
% end
% 
% 
% % Trajectory Estimation And Refinement Using Pose Graph Optimization
% 
% count = 0; % Counter to track number of scans added
% disp('Estimating robot trajectory...');
% 
% for i=1:length(pClouds)
%     % Read point clouds in sequence
%     pc = pClouds{i};
% 
%     ind = (-maxRange < pc(:,1) & pc(:,1) < maxRange ...
%         & -maxRange  < pc(:,2) & pc(:,2) < maxRange ...
%         & (abs(pc(:,2))>abs(0.5*pc(:,1)) | pc(:,1)>0));
%     
%     pcl = pointCloud(pc(ind,:));
% 
%     [~, ~, outliers] = ...
%         pcfitplane(pcl, maxDistance,referenceVector,maxAngularDistance);
%     pcl_wogrd = select(pcl,outliers,'OutputSize','full');
% 
%     ind = (pcl_wogrd.Location(:,3)<annularRegionLimits(2))&(pcl_wogrd.Location(:,3)>annularRegionLimits(1));
%     pcl_wogrd = select(pcl_wogrd,ind,'OutputSize','full');
% 
%     pcl_wogrd_sampled = pcdownsample(pcl_wogrd,'random',randomSampleRatio);
%     
%     if viewPC==1
%         % Visualize down sampled point cloud
%         view(pplayer,pcl_wogrd_sampled);
%         pause(0.001)
%     end    
% 
%     
%     if count == 0
%         % First can
%         tform = [];
%         scanAccepted = 1;
%     else
%         if count == 1
%             tform = pcregisterndt(pcl_wogrd_sampled,prevPc,gridStep);
%         else
%             tform = pcregisterndt(pcl_wogrd_sampled,prevPc,gridStep,...
%                 'InitialTransform',prevTform);
%         end
%         
%         relPose = [tform2trvec(tform.T') tform2quat(tform.T')];
%         
%         if sqrt(norm(relPose(1:3))) > distanceMovedThreshold
%             addRelativePose(pGraph,relPose);
%             scanAccepted = 1;
%         else
%             scanAccepted = 0;
%         end
%     end
%  
%     if scanAccepted == 1
%         count = count + 1;
%         
%         pcProcessed{count} = pcl_wogrd_sampled;
%         
%         mmWaveScans2d{count} = exampleHelperCreate2DScan(pcl_wogrd_sampled);
%         
%         % Submaps are created for faster loop closure query. 
%         if rem(count,nScansPerSubmap)==0
%             submaps{count/nScansPerSubmap} = exampleHelperCreateSubmap(mmWaveScans2d,...
%                 pGraph,count,nScansPerSubmap,maxLidarRange);
%         end
%         
%         % loopSubmapIds contains matching submap ids if any otherwise empty.   
%         if (floor(count/nScansPerSubmap)>subMapThresh)
%             [loopSubmapIds,~] = exampleHelperEstimateLoopCandidates(pGraph,...
%                 count,submaps,mmWaveScans2d{count},nScansPerSubmap,...
%                 loopClosureSearchRadius,loopClosureThreshold,subMapThresh);
%             
%             if ~isempty(loopSubmapIds)
%                 rmseMin = inf;
%                 
%                 % Estimate best match to the current scan
%                 for k = 1:length(loopSubmapIds)
%                     % For every scan within the submap
%                     for j = 1:nScansPerSubmap
%                         probableLoopCandidate = ...
%                             loopSubmapIds(k)*nScansPerSubmap - j + 1;
%                         [loopTform,~,rmse] = pcregisterndt(pcl_wogrd_sampled,...
%                             pcProcessed{probableLoopCandidate},gridStep);
%                         % Update best Loop Closure Candidate
%                         if rmse < rmseMin
%                             loopCandidate = probableLoopCandidate;
%                             rmseMin = rmse;
%                         end
%                         if rmseMin < rmseThreshold
%                             break;
%                         end
%                     end
%                 end
%                 
%                 % Check if loop candidate is valid
%                 if rmseMin < rmseThreshold
%                     % loop closure constraint
%                     relPose = [tform2trvec(loopTform.T') tform2quat(loopTform.T')];
%                     
%                     addRelativePose(pGraph,relPose,infoMat,...
%                         loopCandidate,count);
%                     numLoopClosuresSinceLastOptimization = numLoopClosuresSinceLastOptimization + 1;
%                 end
%                      
%             end
%         end
% 
%         if (numLoopClosuresSinceLastOptimization == optimizationInterval)||...
%                 ((numLoopClosuresSinceLastOptimization>0)&&(i==length(pClouds)))
%             if loopClosureSearchRadius ~=1
%                 disp('Doing Pose Graph Optimization to reduce drift.');
%             end
%             % pose graph optimization
%             pGraph = optimizePoseGraph(pGraph);
%             loopClosureSearchRadius = 1;
%             if viewMap == 1
%                 position = pGraph.nodes;
%                 % Rebuild map after pose graph optimization
%                 omap = occupancyMap3D(mapResolution);
%                 for n = 1:(pGraph.NumNodes-1)
%                     insertPointCloud(omap,position(n,:),pcsToView{n}.removeInvalidPoints,maxRange);
%                 end
%                 mapUpdated = true;
%                 ax = newplot;
%                 grid on;
%             end
%             numLoopClosuresSinceLastOptimization = 0;
%             % Reduce the frequency of optimization after optimizing
%             % the trjectory
%             optimizationInterval = optimizationInterval*7;
%         end 
% 
%         pcToView = pcdownsample(pcl_wogrd_sampled, 'random', 0.5);
%         pcsToView{count} = pcToView;
%         
%         if viewMap==1
%             % Insert point cloud to the occupance map in the right position
%             position = pGraph.nodes(count);
%             insertPointCloud(omap,position,pcToView.removeInvalidPoints,maxRange);
%             
%             if (rem(count-1,15)==0)||mapUpdated
%                 exampleHelperVisualizeMapAndPoseGraph(omap, pGraph, ax);
%             end
%             mapUpdated = false;
%         else
%             % Give feedback to know that example is running
%             if (rem(count-1,15)==0)
%                 fprintf('.');
%             end
%         end
%         
%         prevPc = pcl_wogrd_sampled;
%         prevTform = tform;
%     end
% end